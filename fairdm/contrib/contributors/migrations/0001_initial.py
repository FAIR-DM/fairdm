# Generated by Django 5.1.6 on 2025-06-20 13:01

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_bleach.models
import django_lifecycle.mixins
import easy_thumbnails.fields
import fairdm.contrib.contributors.models
import fairdm.core.vocabularies
import fairdm.utils.models
import fairdm.utils.utils
import jsonfield_toolkit.models
import research_vocabs.fields
import shortuuid.django_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("research_vocabs", "0002_alter_concept_unique_together"),
    ]

    operations = [
        migrations.CreateModel(
            name="Contributor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet=None,
                        editable=False,
                        length=22,
                        max_length=23,
                        prefix="c",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "image",
                    easy_thumbnails.fields.ThumbnailerImageField(
                        blank=True,
                        null=True,
                        upload_to=fairdm.utils.utils.default_image_path,
                        verbose_name="profile image",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=512, verbose_name="preferred name"),
                ),
                (
                    "alternative_names",
                    jsonfield_toolkit.models.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        help_text="Any other names by which the contributor is known.",
                        null=True,
                        size=None,
                        verbose_name="alternative names",
                    ),
                ),
                ("profile", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "links",
                    jsonfield_toolkit.models.ArrayField(
                        base_field=models.URLField(),
                        blank=True,
                        default=list,
                        help_text="A list of online resources related to this contributor.",
                        null=True,
                        size=None,
                        verbose_name="links",
                    ),
                ),
                (
                    "lang",
                    jsonfield_toolkit.models.ArrayField(
                        base_field=models.CharField(max_length=5),
                        blank=True,
                        default=list,
                        help_text="Language of the contributor.",
                        null=True,
                        size=None,
                        verbose_name="language",
                    ),
                ),
                (
                    "last_synced",
                    models.DateField(
                        blank=True,
                        default=None,
                        editable=False,
                        help_text="The last time the contributor was synced with the external provider (e.g. ORCID, ROR).",
                        null=True,
                        verbose_name="last synced",
                    ),
                ),
                (
                    "synced_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        editable=False,
                        help_text="A JSON representation of the contributor's data from the external provider.",
                        null=True,
                        verbose_name="synced data",
                    ),
                ),
                (
                    "added",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this record was added to the database.",
                        verbose_name="Date added",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this record was last modified.",
                        verbose_name="Last modified",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "contributor",
                "verbose_name_plural": "contributors",
                "ordering": ["name"],
            },
            bases=(fairdm.utils.models.PolymorphicMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ContributorRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uri", models.URLField(unique=True, verbose_name="URI")),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "label",
                    models.CharField(max_length=255, verbose_name="preferred label"),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True,
                        help_text="Additional metadata about the concept, such as synonyms, definitions, etc.",
                        null=True,
                        verbose_name="metadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "role",
                "verbose_name_plural": "roles",
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "contributor_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="contributors.contributor",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "member_since",
                    models.DateTimeField(
                        blank=True, default=None, null=True, verbose_name="member since"
                    ),
                ),
                (
                    "is_member",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user is an active member of the community or has been added by another process. ",
                        verbose_name="member",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            bases=("contributors.contributor", models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "contributor_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="contributors.contributor",
                    ),
                ),
                (
                    "lat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        help_text="The latitude of the organization.",
                        max_digits=7,
                        null=True,
                        verbose_name="latitude",
                    ),
                ),
                (
                    "lon",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        help_text="The longitude of the organization.",
                        max_digits=8,
                        null=True,
                        verbose_name="longitude",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="The city where the organization is based.",
                        max_length=255,
                        null=True,
                        verbose_name="city",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="The country where the organization is based.",
                        max_length=255,
                        null=True,
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "organization",
                "verbose_name_plural": "organizations",
            },
            bases=("contributors.contributor",),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ContributorIdentifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("CROSSREF_FUNDER_ID", "Crossref Funder ID"),
                            ("ISNI", "ISNI"),
                            ("ORCID", "ORCID iD"),
                            ("ROR", "ROR"),
                            ("RESEARCHER_ID", "ResearcherID"),
                            ("WIKIDATA", "Wikidata"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        db_index=True,
                        max_length=255,
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "related",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contributors.contributor",
                    ),
                ),
            ],
            options={
                "verbose_name": "identifier",
                "verbose_name_plural": "identifiers",
                "abstract": False,
                "default_related_name": "identifiers",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[],
            options={
                "verbose_name": "community member",
                "verbose_name_plural": "community members",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("contributors.person",),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this record was added to the database.",
                        verbose_name="Date added",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this record was last modified.",
                        verbose_name="Last modified",
                    ),
                ),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (0, "Pending"),
                            (1, "Member"),
                            (2, "Admin"),
                            (3, "Owner"),
                        ],
                        default=1,
                        help_text="The type of membership that the person has with the organization",
                        verbose_name="type",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Denotes whether this is the primary affiliation of the contributor.",
                        verbose_name="primary organization",
                    ),
                ),
                (
                    "is_current",
                    models.BooleanField(
                        default=True,
                        help_text="Denotes whether this is a current affiliation of the contributor.",
                        verbose_name="is current",
                    ),
                ),
                (
                    "person",
                    auto_prefetch.ForeignKey(
                        help_text="The person that is a member of the organization.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_memberships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="person",
                    ),
                ),
                (
                    "organization",
                    auto_prefetch.ForeignKey(
                        help_text="The organization that the person is a member of.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="contributors.organization",
                        verbose_name="organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "affiliation",
                "verbose_name_plural": "affiliations",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="members",
            field=models.ManyToManyField(
                help_text="A list of personal contributors that are members of the organization.",
                related_name="affiliations",
                through="contributors.OrganizationMember",
                to=settings.AUTH_USER_MODEL,
                verbose_name="members",
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="parent",
            field=auto_prefetch.ForeignKey(
                blank=True,
                help_text="The organization that this organization is a part of.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sub_organizations",
                to="contributors.organization",
                verbose_name="parent organization",
            ),
        ),
        migrations.CreateModel(
            name="Contribution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                ("object_id", models.CharField(max_length=23)),
                (
                    "store",
                    models.JSONField(
                        default=dict,
                        help_text="A JSON representation of the contributor profile at the time of publication",
                        verbose_name="contributor",
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        default=fairdm.contrib.contributors.models.contributor_permissions_default,
                        help_text="A JSON representation of the contributor's permissions at the time of publication",
                        verbose_name="permissions",
                    ),
                ),
                (
                    "content_type",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "contributor",
                    auto_prefetch.ForeignKey(
                        help_text="The person or organisation that contributed to the project or dataset.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="contributions",
                        to="contributors.contributor",
                        verbose_name="contributor",
                    ),
                ),
                (
                    "roles",
                    research_vocabs.fields.ConceptManyToManyField(
                        help_text="The roles assigned to the contributor for this contribution.",
                        related_name="+",
                        to="research_vocabs.concept",
                        verbose_name="roles",
                        vocabulary=fairdm.core.vocabularies.FairDMRoles,
                    ),
                ),
            ],
            options={
                "verbose_name": "contributor",
                "verbose_name_plural": "contributors",
                "ordering": ["object_id", "order"],
                "unique_together": {("content_type", "object_id", "contributor")},
            },
        ),
    ]
