# Generated by Django 5.1.6 on 2025-06-20 13:01

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
import django_bleach.models
import django_lifecycle.mixins
import easy_thumbnails.fields
import fairdm.core.choices
import fairdm.db.fields
import fairdm.utils.utils
import research_vocabs.fields
import shortuuid.django_fields
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("dataset", "0002_initial"),
        ("fairdm_location", "0001_initial"),
        ("generic", "0001_initial"),
        ("research_vocabs", "0002_alter_concept_unique_together"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this record was added to the database.",
                        verbose_name="Date added",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this record was last modified.",
                        verbose_name="Last modified",
                    ),
                ),
                (
                    "image",
                    easy_thumbnails.fields.ThumbnailerImageField(
                        blank=True,
                        null=True,
                        upload_to=fairdm.utils.utils.default_image_path,
                        verbose_name="image",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "options",
                    models.JSONField(blank=True, null=True, verbose_name="options"),
                ),
                (
                    "uuid",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet=None,
                        editable=False,
                        length=22,
                        max_length=23,
                        prefix="s",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "local_id",
                    models.CharField(
                        blank=True,
                        help_text="An alphanumeric identifier used by the creator/s to identify the sample within a specific dataset",
                        max_length=255,
                        null=True,
                        verbose_name="Local ID",
                    ),
                ),
                (
                    "status",
                    research_vocabs.fields.ConceptField(
                        default="unknown",
                        max_length=8,
                        verbose_name="status",
                        vocabulary=fairdm.core.choices.SampleStatus,
                    ),
                ),
                (
                    "dataset",
                    auto_prefetch.ForeignKey(
                        help_text="The original dataset this sample first appeared in.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="samples",
                        to="dataset.dataset",
                        verbose_name="dataset",
                    ),
                ),
                (
                    "keywords",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Controlled keywords for enhanced discoverability",
                        to="research_vocabs.concept",
                        verbose_name="keywords",
                    ),
                ),
                (
                    "location",
                    auto_prefetch.ForeignKey(
                        blank=True,
                        help_text="The location of the sample.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="fairdm_location.point",
                        verbose_name="location",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="generic.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "sample",
                "verbose_name_plural": "samples",
                "ordering": ["added"],
                "default_related_name": "samples",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SampleDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Created", "Creation date"),
                            ("Destroyed", "Destruction date"),
                            ("Collected", "Collection date"),
                            ("Returned", "Return date"),
                            ("Prepared", "Preparation date"),
                            ("Archival", "Storage date"),
                            ("Restored", "Restoration date"),
                        ],
                        max_length=50,
                    ),
                ),
                ("value", fairdm.db.fields.PartialDateField(verbose_name="date")),
                (
                    "related",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sample.sample"
                    ),
                ),
            ],
            options={
                "verbose_name": "date",
                "verbose_name_plural": "dates",
                "ordering": ["value"],
                "abstract": False,
                "default_related_name": "dates",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SampleDescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SampleCollection", "Collection"),
                            ("SamplePreparation", "Preparation"),
                            ("SampleStorage", "Storage"),
                            ("SampleDestruction", "Destruction"),
                            ("Other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("value", django_bleach.models.BleachField()),
                (
                    "related",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sample.sample"
                    ),
                ),
            ],
            options={
                "verbose_name": "description",
                "verbose_name_plural": "descriptions",
                "abstract": False,
                "default_related_name": "descriptions",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SampleIdentifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("CROSSREF_FUNDER_ID", "Crossref Funder ID"),
                            ("ISNI", "ISNI"),
                            ("ORCID", "ORCID iD"),
                            ("ROR", "ROR"),
                            ("RESEARCHER_ID", "ResearcherID"),
                            ("WIKIDATA", "Wikidata"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        db_index=True,
                        max_length=255,
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "related",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sample.sample"
                    ),
                ),
            ],
            options={
                "verbose_name": "identifier",
                "verbose_name_plural": "identifiers",
                "abstract": False,
                "default_related_name": "identifiers",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SampleRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("child_of", "child of")],
                        max_length=255,
                        verbose_name="type",
                    ),
                ),
                (
                    "source",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_samples",
                        to="sample.sample",
                        verbose_name="source",
                    ),
                ),
                (
                    "target",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_to",
                        to="sample.sample",
                        verbose_name="target",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
